version: 1
name: "databricks-all-purpose-cluster"
description: creates a databricks workspace and all-purpose cluster
providers:
  - aws
  - databricks_account
  - databricks_workspace
globals:
  - name: databricks_account_id
    description: databricks account id
    value: "{{ DATABRICKS_ACCOUNT_ID }}"
  - name: databricks_aws_account_id
    description: databricks AWS account id
    value: "{{ DATABRICKS_AWS_ACCOUNT_ID }}"
  - name: aws_account
    description: aws_account id
    value: "{{ AWS_ACCOUNT_ID }}"
  - name: region
    description: aws region
    value: "{{ AWS_REGION }}"
  - name: global_tags
    value:
      - Key: Provisioner
        Value: stackql
      - Key: StackName
        Value: "{{ stack_name }}"
      - Key: StackEnv
        Value: "{{ stack_env }}"
resources:
# ====================================================================================
# AWS IAM
# ====================================================================================
  - name: aws_iam_cross_account_role
    props:
      - name: role_name
        value: "{{ stack_name }}-{{ stack_env }}-role"
      - name: assume_role_policy_document
        value:
          Version: "2012-10-17"
          Statement:
            - Sid: ""
              Effect: "Allow"
              Principal:
                AWS: "arn:aws:iam::{{ databricks_aws_account_id }}:root"
              Action: "sts:AssumeRole"
              Condition:
                StringEquals:
                  sts:ExternalId: "{{ databricks_account_id }}"
      - name: description
        value: 'allows Databricks to access resources in ({{ stack_name }}-{{ stack_env }})'
      - name: path
        value: '/'
      - name: policies
        value:
          - PolicyDocument:
              Statement:
                - Sid: Stmt1403287045000
                  Effect: Allow
                  Action:
                    - "ec2:AllocateAddress"
                    - "ec2:AssociateDhcpOptions"
                    - "ec2:AssociateIamInstanceProfile"
                    - "ec2:AssociateRouteTable"
                    - "ec2:AttachInternetGateway"
                    - "ec2:AttachVolume"
                    - "ec2:AuthorizeSecurityGroupEgress"
                    - "ec2:AuthorizeSecurityGroupIngress"
                    - "ec2:CancelSpotInstanceRequests"
                    - "ec2:CreateDhcpOptions"
                    - "ec2:CreateInternetGateway"
                    - "ec2:CreateKeyPair"
                    - "ec2:CreateNatGateway"
                    - "ec2:CreatePlacementGroup"
                    - "ec2:CreateRoute"
                    - "ec2:CreateRouteTable"
                    - "ec2:CreateSecurityGroup"
                    - "ec2:CreateSubnet"
                    - "ec2:CreateTags"
                    - "ec2:CreateVolume"
                    - "ec2:CreateVpc"
                    - "ec2:CreateVpcEndpoint"
                    - "ec2:DeleteDhcpOptions"
                    - "ec2:DeleteInternetGateway"
                    - "ec2:DeleteKeyPair"
                    - "ec2:DeleteNatGateway"
                    - "ec2:DeletePlacementGroup"
                    - "ec2:DeleteRoute"
                    - "ec2:DeleteRouteTable"
                    - "ec2:DeleteSecurityGroup"
                    - "ec2:DeleteSubnet"
                    - "ec2:DeleteTags"
                    - "ec2:DeleteVolume"
                    - "ec2:DeleteVpc"
                    - "ec2:DeleteVpcEndpoints"
                    - "ec2:DescribeAvailabilityZones"
                    - "ec2:DescribeIamInstanceProfileAssociations"
                    - "ec2:DescribeInstanceStatus"
                    - "ec2:DescribeInstances"
                    - "ec2:DescribeInternetGateways"
                    - "ec2:DescribeNatGateways"
                    - "ec2:DescribePlacementGroups"
                    - "ec2:DescribePrefixLists"
                    - "ec2:DescribeReservedInstancesOfferings"
                    - "ec2:DescribeRouteTables"
                    - "ec2:DescribeSecurityGroups"
                    - "ec2:DescribeSpotInstanceRequests"
                    - "ec2:DescribeSpotPriceHistory"
                    - "ec2:DescribeSubnets"
                    - "ec2:DescribeVolumes"
                    - "ec2:DescribeVpcs"
                    - "ec2:DescribeVpcAttribute"
                    - "ec2:DescribeNetworkAcls"
                    - "ec2:DetachInternetGateway"
                    - "ec2:DisassociateIamInstanceProfile"
                    - "ec2:DisassociateRouteTable"
                    - "ec2:ModifyVpcAttribute"
                    - "ec2:ReleaseAddress"
                    - "ec2:ReplaceIamInstanceProfileAssociation"
                    - "ec2:ReplaceRoute"
                    - "ec2:RequestSpotInstances"
                    - "ec2:RevokeSecurityGroupEgress"
                    - "ec2:RevokeSecurityGroupIngress"
                    - "ec2:RunInstances"
                    - "ec2:TerminateInstances"
                  Resource:
                    - "*"
                - Effect: Allow
                  Action:
                    - "iam:CreateServiceLinkedRole"
                    - "iam:PutRolePolicy"
                  Resource:
                    - arn:aws:iam::*:role/aws-service-role/spot.amazonaws.com/AWSServiceRoleForEC2Spot
                  Condition:
                    StringLike:
                      "iam:AWSServiceName": spot.amazonaws.com
              Version: '2012-10-17'
            PolicyName: "{{ stack_name }}-{{ stack_env }}-policy"
    exports:
      - aws_iam_cross_account_role_arn
  - name: databricks_credentials
    props:
      - name: credentials_name
        value: "{{ stack_name }}-{{ stack_env }}-credentials"
      - name: aws_credentials
        value:
          sts_role:
            role_arn: "{{ aws_iam_cross_account_role_arn }}"
    exports:
      - databricks_credentials_id
      - databricks_role_external_id
# ====================================================================================
# AWS VPC Networking
# ====================================================================================
  - name: aws_vpc
    props:
      - name: cidr_block
        values:
          prd:
            value: "10.0.0.0/16"
          sit:
            value: "10.1.0.0/16"
          dev:
            value: "10.2.0.0/16"
      - name: tags
        value:
          - Key: Name
            Value: "{{ stack_name }}-{{ stack_env }}-vpc"
        merge: 
          - global_tags
      - name: idempotency_token
        value: 019447a0-b84a-7b7f-bca5-2ee320207e51
    exports:
      - vpc_id
  - name: aws_get_main_route_table_id
    type: query
    exports:
      - route_table_id
  - name: aws_tag_main_vpc_route_table
    type: command
    props:
      - name: tags
        value:
          - Key: Name
            Value: "{{ stack_name }}-{{ stack_env }}-route-table"
        merge: ['global_tags']
  - name: aws_vpc_subnet1
    file: aws_vpc_subnet.iql
    props:
      - name: availability_zone
        value: "us-east-1a"
      - name: cidr_block
        values:
          prd:
            value: "10.0.0.0/19"
          sit:
            value: "10.1.0.0/19"
          dev:
            value: "10.2.0.0/19"
      - name: tags
        value:
          - Key: Name
            Value: "{{ stack_name }}-{{ stack_env }}-subnet-1"
        merge:
          - global_tags
    exports:          
      - subnet_id: aws_vpc_subnet1_id
  - name: aws_vpc_subnet2
    file: aws_vpc_subnet.iql
    props:
      - name: availability_zone
        value: "us-east-1b"
      - name: cidr_block
        values:
          prd:
            value: "10.0.32.0/19"
          sit:
            value: "10.1.32.0/19"
          dev:
            value: "10.2.32.0/19"
      - name: tags
        value:
          - Key: Name
            Value: "{{ stack_name }}-{{ stack_env }}-subnet-2"
        merge:
          - global_tags
    exports:          
      - subnet_id: aws_vpc_subnet2_id
  - name: aws_vpc_inet_gateway
    props:
      - name: tags
        value:
          - Key: Name
            Value: "{{ stack_name }}-{{ stack_env }}-inet-gateway"
        merge: ['global_tags']
      - name: idempotency_token
        value: 019447a5-f076-75f8-9173-092df5a66d35
    exports:
      - internet_gateway_id
  - name: aws_vpc_inet_gw_attachment
    props: []
  - name: aws_vpc_subnet_rt_assn1
    file: aws_vpc_subnet_rt_assn.iql
    props:
      - name: subnet_id
        value: "{{ aws_vpc_subnet1_id }}"
      - name: idempotency_token
        value: 019447aa-1c7a-775b-91dc-04db7c49f4a7
    exports:
      - route_table_assn_id: aws_vpc_subnet1_rt_assn_id
  - name: aws_vpc_subnet_rt_assn2
    file: aws_vpc_subnet_rt_assn.iql
    props:
      - name: subnet_id
        value: "{{ aws_vpc_subnet2_id }}"
      - name: idempotency_token
        value: 019447ab-1302-754a-a580-99071f1ad814
    exports:
      - route_table_assn_id: aws_vpc_subnet2_rt_assn_id
  - name: aws_vpc_inet_route
    props: []
    exports:
      - inet_route_indentifer    
  - name: aws_vpc_security_group
    props:
      - name: group_name
        value: "{{ stack_name }}-{{ stack_env }}-sg"
      - name: group_description
        value: "security group for {{ stack_name }} ({{ stack_env }} environment)"
      - name: tags
        value:
          - Key: Name
            Value: "{{ stack_name }}-{{ stack_env }}-sg"
        merge: ['global_tags']
    exports:
      - security_group_id
  - name: aws_vpc_security_group_rules
    props:
      - name: security_group_ingress
        value:
          - FromPort: 1025
            ToPort: 65535
            SourceSecurityGroupOwnerId: "{{ aws_account }}"
            IpProtocol: tcp
            SourceSecurityGroupId: "{{ security_group_id }}"
          - FromPort: 1025
            ToPort: 65535
            SourceSecurityGroupOwnerId: "{{ aws_account }}"
            IpProtocol: udp
            SourceSecurityGroupId: "{{ security_group_id }}"
          - CidrIp: "3.237.73.224/28"
            FromPort: 443
            ToPort: 443
            IpProtocol: "tcp"
          - CidrIp: "54.156.226.103/32"
            FromPort: 443
            ToPort: 443
            IpProtocol: "tcp"
      - name: security_group_egress
        value:
          - CidrIp: "0.0.0.0/0"
            Description: Allow all outbound traffic
            FromPort: -1
            ToPort: -1
            IpProtocol: "-1"
  - name: databricks_network
    props:
      - name: databricks_network_name
        value: "{{ stack_name }}-{{ stack_env }}-network"
      - name: subnet_ids
        value: 
          - "{{ aws_vpc_subnet1_id }}"
          - "{{ aws_vpc_subnet2_id }}"
      - name: security_group_ids
        value:
          - "{{ security_group_id }}"
    exports:
      - databricks_network_id
# ====================================================================================
# AWS Storage
# ====================================================================================
  - name: aws_s3_workspace_bucket
    props:
      - name: bucket_name
        value: "{{ stack_name }}-{{ stack_env }}-root-bucket"
      - name: ownership_controls
        value:
          Rules:
            - ObjectOwnership: "BucketOwnerPreferred"
      - name: bucket_encryption
        value:
          ServerSideEncryptionConfiguration:
            - BucketKeyEnabled: true
              ServerSideEncryptionByDefault:        
                SSEAlgorithm: "AES256"
      - name: public_access_block_configuration
        value:
          BlockPublicAcls: true
          IgnorePublicAcls: true
          BlockPublicPolicy: true
          RestrictPublicBuckets: true
      - name: versioning_configuration
        value:
          Status: "Suspended"
    exports:
      - aws_s3_workspace_bucket_name
      - aws_s3_workspace_bucket_arn
  - name: aws_s3_workspace_bucket_policy
    props:
      - name: policy_document
        value:
          Version: "2012-10-17"
          Statement:
            - Sid: Grant Databricks Access
              Effect: Allow
              Principal:
                AWS: "arn:aws:iam::{{ databricks_aws_account_id }}:root"
              Action:
                - "s3:GetObject"
                - "s3:GetObjectVersion"
                - "s3:PutObject"
                - "s3:DeleteObject"
                - "s3:ListBucket"
                - "s3:GetBucketLocation"
              Resource:
                - "{{ aws_s3_workspace_bucket_arn }}/*"
                - "{{ aws_s3_workspace_bucket_arn }}"
  - name: databricks_storage_configuration
    props:
    - name: storage_configuration_name
      value: "{{ stack_name }}-{{ stack_env }}-storage"
    - name: root_bucket_info
      value:
        bucket_name: "{{ aws_s3_workspace_bucket_name }}"
    exports:
      - databricks_storage_configuration_id
# ====================================================================================
# DBX Workspace
# ====================================================================================
  - name: databricks_workspace
    props:
    - name: workspace_name
      value: "{{ stack_name }}-{{ stack_env }}-workspace"
    - name: network_id
      value: "{{ databricks_network_id }}"
    - name: aws_region
      value: "{{ region }}"
    - name: credentials_id
      value: "{{ databricks_credentials_id }}"
    - name: storage_configuration_id
      value: "{{ databricks_storage_configuration_id }}"
    - name: pricing_tier
      value: PREMIUM
    exports:
      - databricks_workspace_id        
